/*
	Parse an array of code into unique ID >> config.UserScript.codes
*/
export function parseArrayOfCodeIntoUniqueID(array) {
	const codes       = structuredClone(array);
	const flatArray   = codes.map(elm => elm.id);
	const isDuplicate = (flatArray.length !== (new Set(flatArray)).size); // 重複検知

	if ( !isDuplicate ) {
		return codes;
	}

	(flatArray).forEach(
		(element, index) => {
			const match = flatArray.filter(elm => elm === element);

			if ( match.length > 1 )  {
				const id = generateID(32);

				console.log("Duplicate", index, match);

				flatArray[index]  = id;
				(codes[index]).id = id;
			}
		}
	);

	return codes;
}

export function generateID(digit = 8, character = { number: true, alphabet: { uppercase: true, lowercase: true }, symbol: false }) {
	const validate = (digit && typeof digit === "number" && Number.isInteger(digit));
	if (!validate) {
		throw new TypeError(`Error, Invalid value passed to generateID(). digit >> ${digit}`);
	}

	const number = Number(digit);
	if ( !(Number.MAX_VALUE >= number) && (number > 0) ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). The number generated by the number of digits passed is not within the legal range. digit & generated number >> digit:${digit}, number:${number}`);
	}

	if ( !character || typeof character !== "object" ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character >> ${character}`);
	} else if ( !character?.number && !character?.alphabet?.uppercase && !character?.alphabet?.lowercase && !character?.symbol ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character >> ${character}`);
	} else if ( character?.number && typeof character.number !== "boolean" ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character.number >> ${character}`);
	} else if ( character?.alphabet?.uppercase && typeof character.alphabet.uppercase !== "boolean" ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character.alphabet.uppercase >> ${character}`);
	} else if ( character?.alphabet?.lowercase && typeof character.alphabet.lowercase !== "boolean" ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character.alphabet.lowercase >> ${character}`);
	} else if ( character?.symbol && typeof character.symbol !== "boolean" ) {
		throw new TypeError(`Error, Invalid value passed to generateID(). character.symbol >> ${character}`);
	}

	character = Object.assign({ number: false, alphabet: { uppercase: false, lowercase: false }, symbol: false }, character);

	const stringType = {
		number  : "0123456789",
		alphabet : {
			uppercase : "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			lowercase : "abcdefghijklmnopqrstuvwxyz"
		},
		symbol : "`~!@#$%^&*()_+-={}[]|:;\"'<>,.?/"
	};
	const getCharacter = (chr) => {
		let str = "";

		if ( chr?.number ) {
			str += stringType.number;
		}
		if ( chr?.alphabet?.uppercase ) {
			str += stringType.alphabet.uppercase;
		}
		if ( chr?.alphabet?.lowercase ) {
			str += stringType.alphabet.lowercase;
		}
		if ( chr?.symbol ) {
			str += stringType.symbol;
		}

		return str;
	};

	const typedArray  = new Uint32Array(digit);
	const cryptoArray = crypto.getRandomValues(typedArray);
	const char        = getCharacter(character);
	const rand        = Array.from(cryptoArray)
		.map((number) => char[number % char.length])
		.join("");

	return rand;
}

export function sleep(msec) {
	return new Promise(resolve => setTimeout(resolve, msec));
}

/*
	Deep Freeze(https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)
*/
export function deepFreeze(obj) {
	// オブジェクトで定義されたプロパティ名を取得
	const propNames = Object.getOwnPropertyNames(obj);

	// 自分自身を凍結する前にプロパティを凍結
	for (const name of propNames) {
		const value = obj[name];

		if (value && typeof value === "object") {
			deepFreeze(value);
		}
	}

	return Object.freeze(obj);
}

export function isChromeVersion92orLater(define) {
	const regex              = /(Chrome|Chromium|Edge)/i;
	const version            = parseInt(define.Environment.Browser.browser.version, 10);
	const isChromium         = (regex).test(define.Environment.Browser.browser.name);
	const isVersion92orLater = (version >= 92);
	const result             = (isChromium && isVersion92orLater);

	// console.log({version, isChromium, BrowserName: define.Environment.Browser});

	return result;
}

export function parseObjectToValue(obj) {
	return JSON.parse(JSON.stringify(obj));
}

export function typeOf(obj) {
	return (Object.prototype.toString).call(obj).slice(8, -1).toLowerCase();
}

export function hasParentNode(elm) {
	const parent = elm.parentNode;
	const obj    = {
		elm  : parent,
		hasP : Object.hasOwn(parent, "nodeName"),
		name : (parent.nodeName).toLowerCase(),
		isA  : (parent.nodeName).toLowerCase() === "a",
		href : parent.href
	};

	console.log("Has parentNode ?", obj);

	return obj;
}

/*
	escape と encodeURI と encodeURIComponent を正しく使い分ける(https://aloerina01.github.io/blog/2017-04-28-1)
*/
export function escapeHTML(target) {
	if (typeof target !== "string") {
		return target;
	}

	return (target).replace(/[&'`"<>]/g, (match) => {
		return {
			"&" : "&amp;",
			"'" : "&#x27;",
			"`" : "&#x60;",
			'"' : "&quot;",
			"<" : "&lt;",
			">" : "&gt;"
		}[match];
	});
}

/*
	指定セレクタのCSSルールを取得する(https://qiita.com/life5618/items/950558e4b72c038333f8)
	呼び出し例 getRuleBySelector(".inner1")  selector に CSSセレクタ
*/
export function getRuleBySelector(selector) {
	let rule = null;

	// stylesheetのリストを取得
	const sheets = document.styleSheets;

	for (let i = 0; i < sheets.length; i++) {
		// そのstylesheetが持つCSSルールのリストを取得
		const rules = sheets[i].cssRules;

		for (let j = 0; j < rules.length; j++) {
			// セレクタが一致するか調べる
			if (selector === rules[j].selectorText) {
				rule = rules[j];
				break;
			}
		}
	}

	return rule;
}

/*
	JavaScriptで呼び出し元の関数名を取得する方法 考えてみた(https://pisuke-code.com/js-get-caller-function-name/#i)
*/
export function getCallerFunctionName() {
	let callerName = null;

	try {
		throw new Error();
	} catch (e) {
		callerName = "None";

		const reg = /(\w+)@|at (\w+) \(/g;
		const st  = e.stack;
		let   m;

		while ((m = reg.exec(st))) {
			callerName = (m !== null) ? m[1] || m[2] : "None";
		}
	}

	// debug
	console.log("Caller Function Name >>", callerName);

	return callerName;
}

/*
	JavaScriptで半角を0.5、全角を1で文字数を計算する方法(https://zenn.dev/koojy/articles/javascript-2byte-length)
*/
export function getWidthOfStringLength(str) {
	let   count = 0;
	const loop  = str.length;

	for (let i = 0; i < loop; i++) {
		const char = str.charCodeAt(i);

		if (!str[i].match(/\r?\n/g)) { // 改行コード判定
			if (char >= 0x0 && char <= 0x7f) { // 全角半角判定
				count += 1; // 半角 = 1 >> 表示幅換算
			} else {
				count += 2; // 全角 = 2 >> 表示幅換算
			}
		}
	}

	return count;
}

/*
	textareaの高さを計算して自動で可変(https://web-dev.tech/front-end/javascript/textarea-auto-height/)
*/
export function setTextareaHeightAutomatically(event) {
	const self = event.currentTarget;

	self.style.height = "auto";
	self.style.height = `${this.scrollHeight}px`;
}