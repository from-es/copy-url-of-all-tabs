/**
 * 機能      : ユニークIDの生成と、配列内のID重複チェック機能を提供します。
 * 依存関係  : なし (ただし、crypto APIを使用)
 * 最終更新日: 2025年8月12日
 */

/*
	Parse an array of code into unique ID >> config.UserScript.codes
*/
function parseArrayOfCodeIntoUniqueID(array) {
	const codes       = structuredClone(array);
	const flatArray   = codes.map(elm => elm.id);
	const isDuplicate = (flatArray.length !== (new Set(flatArray)).size); // 重複検知

	if ( !isDuplicate ) {
		return codes;
	}

	(flatArray).forEach(
		(element, index) => {
			const match = flatArray.filter(elm => elm === element);

			if ( match.length > 1 )  {
				const id = generateID(32);

				console.log("Duplicate", index, match);

				flatArray[index]  = id;
				(codes[index]).id = id;
			}
		}
	);

	return codes;
}

function generateID(digit = 8, character = { number: true, alphabet: { uppercase: true, lowercase: true }, symbol: false }) {
	const validate = (digit && typeof digit === "number" && Number.isInteger(digit));
	if (!validate) {
		throw (`Error, Invalid value passed to generateID(). digit >> ${digit}`);
	}

	const number = Number(digit);
	if ( !(Number.MAX_VALUE >= number) && (number > 0) ) {
		throw (`Error, Invalid value passed to generateID(). The number generated by the number of digits passed is not within the legal range. digit & generated number >> digit:${digit}, number:${number}`);
	}

	if ( !character || typeof character !== "object" ) {
		throw (`Error, Invalid value passed to generateID(). character >> ${character}`);
	} else if ( !character?.number && !character?.alphabet?.uppercase && !character?.alphabet?.lowercase && !character?.symbol ) {
		throw (`Error, Invalid value passed to generateID(). character >> ${character}`);
	} else if ( character?.number && typeof character.number !== "boolean" ) {
		throw (`Error, Invalid value passed to generateID(). character.number >> ${character}`);
	} else if ( character?.alphabet?.uppercase && typeof character.alphabet.uppercase !== "boolean" ) {
		throw (`Error, Invalid value passed to generateID(). character.alphabet.uppercase >> ${character}`);
	} else if ( character?.alphabet?.lowercase && typeof character.alphabet.lowercase !== "boolean" ) {
		throw (`Error, Invalid value passed to generateID(). character.alphabet.lowercase >> ${character}`);
	} else if ( character?.symbol && typeof character.symbol !== "boolean" ) {
		throw (`Error, Invalid value passed to generateID(). character.symbol >> ${character}`);
	}

	character = Object.assign({ number: false, alphabet: { uppercase: false, lowercase: false }, symbol: false }, character);

	const stringType = {
		number  : "0123456789",
		alphabet : {
			uppercase : "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
			lowercase : "abcdefghijklmnopqrstuvwxyz"
		},
		symbol : "`~!@#$%^&*()_+-={}[]|:;\"'<>,.?/"
	};
	const getCharacter = (chr) => {
		let str = "";

		if ( chr?.number ) {
			str += stringType.number;
		}
		if ( chr?.alphabet?.uppercase ) {
			str += stringType.alphabet.uppercase;
		}
		if ( chr?.alphabet?.lowercase ) {
			str += stringType.alphabet.lowercase;
		}
		if ( chr?.symbol ) {
			str += stringType.symbol;
		}

		return str;
	};

	const typedArray  = new Uint32Array(digit);
	const cryptoArray = crypto.getRandomValues(typedArray);
	const char        = getCharacter(character);
	const rand        = Array.from(cryptoArray)
								.map((number) => char[number % char.length])
								.join("");

	return rand;
}

export { parseArrayOfCodeIntoUniqueID, generateID };